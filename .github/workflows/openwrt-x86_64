name: OpenWrt Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Free up disk space early
      run: |
        sudo rm -rf /usr/share/dotnet /opt/ghc /opt/hostedtoolcache/CodeQL /usr/local/share/boost
        sudo apt-get purge -y git-lfs
        sudo docker image prune --all --force --no-trunc -a || true
        sudo apt-get autoremove -y --purge
        sudo apt-get clean -y

    - name: Initialization environment
      run: |
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$USER /workdir
        cd /workdir

    - name: Set up cache keys
      id: cache
      run: |
        echo "cache-key=setup-feeds-$(git rev-parse HEAD)" >> $GITHUB_ENV
        echo "cache-key-dl=download-$(grep -E '^src-git' $FEEDS_CONF | md5sum | cut -d' ' -f1)" >> $GITHUB_ENV

    - name: Cache feeds
      uses: actions/cache@v4
      id: cache_feeds
      with:
        path: /workdir/openwrt/feeds
        key: ${{ env.cache-key }}

    - name: Cache dl directory
      uses: actions/cache@v4
      id: cache_dl
      with:
        path: /workdir/openwrt/dl
        key: ${{ env.cache-key-dl }}

    - name: Clone source code
      if: steps.cache_feeds.outputs.cache-hit != 'true'
      run: |
        cd /workdir
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Restore symlinks
      run: |
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        [ -e $FEEDS_CONF ] && cp $FEEDS_CONF feeds.conf.default
        [ -f $DIY_P1_SH ] && chmod +x $DIY_P1_SH && ../$DIY_P1_SH

    - name: Update feeds (only if not cached)
      if: steps.cache_feeds.outputs.cache-hit != 'true'
      run: |
        cd /workdir/openwrt
        ./scripts/feeds update -a

    - name: Install feeds (only if not cached)
      if: steps.cache_feeds.outputs.cache-hit != 'true'
      run: |
        cd /workdir/openwrt
        ./scripts/feeds install -a
        # 可选：删除不需要的 feed 目录减小体积
        # rm -rf feeds/luci/themes/luci-theme-argon

    - name: Load custom configuration
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        [ -e $CONFIG_FILE ] && cp $CONFIG_FILE .config
        [ -e files ] && cp -r $GITHUB_WORKSPACE/files .
        [ -f $DIY_P2_SH ] && chmod +x $DIY_P2_SH && ../$DIY_P2_SH

    - name: Prepare config
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        make defconfig

    - name: Download package sources
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        # 使用合理线程数，避免内存溢出
        make download -j4
        # 清理小文件（可能是损坏的或临时文件）
        find dl -size -1k -delete

    - name: Compile firmware
      run: |
        cd $GITHUB_WORKSPACE/openwrt
        echo "Starting compilation with $(nproc) cores..."
        # 先并行，失败后降级单线程调试
        make -j$(nproc) || make -j1 V=s
        # 标记成功
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

    - name: Check disk usage
      if: always()
      run: df -hT

    - name: Organize firmware
      run: |
        cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        rm -rf packages  # 删除中间包，只保留固件
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Upload bin directory (optional)
      uses: actions/upload-artifact@v4
      if: env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: /workdir/openwrt/bin

    - name: Upload firmware only
      uses: actions/upload-artifact@v4
      if: env.UPLOAD_FIRMWARE == 'true'
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Create release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true'
      run: |
        echo "release_tag=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      if: env.UPLOAD_RELEASE == 'true' && steps.tag.outputs.release_tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        files: ${{ env.FIRMWARE }}/*
        body: |
          Firmware built on ${{ steps.tag.outputs.release_tag }}
          Device: ${{ env.DEVICE_NAME }}

    - name: Cleanup old runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v1
      if: env.UPLOAD_RELEASE == 'true'
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
